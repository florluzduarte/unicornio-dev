---
import type { GetStaticPaths, InferGetStaticParamsType } from "astro";
import type {
  BlogPostData,
  BlogPosts,
} from "@type/content-collections/blog-collection-types";
import type { Lang } from "@translate/dictionary";
import { getCollection } from "astro:content";
import { useTranslations } from "@translate/utils/i18n-utils";
import BaseLayout from "@layouts/BaseLayout.astro";
import Heading1 from "@components/ui/text-components/Heading1.astro";
import Line from "@components/ui/line/Line.astro";
import BlogArticle from "@components/blog/blog-article/BlogArticle.astro";

export const getStaticPaths = (() => {
  return [{ params: { lang: "es" } }, { params: { lang: "en" } }];
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

const allPostsSpanish: BlogPosts[] = await getCollection(
  "blog",
  ({ data }: { data: BlogPostData }) => {
    return data.language === "es";
  },
);

const spanishPostsSortedByDate = allPostsSpanish.sort(
  (postA, postB) =>
    Date.parse(postB.data.publishDate) - Date.parse(postA.data.publishDate),
);

const allPostsEnglish: BlogPosts[] = await getCollection(
  "blog",
  ({ data }: { data: BlogPostData; slug: string }) => {
    return data.language === "en";
  },
);

const englishPostsSortedByDate = allPostsEnglish.sort(
  (postA, postB) =>
    Date.parse(postB.data.publishDate) - Date.parse(postA.data.publishDate),
);

const { lang } = Astro.params as Params;
const t = useTranslations(lang as Lang);
---

<BaseLayout>
  <Heading1>{t("blog.title")}</Heading1>
  <div class="mb-14">
    <Line />
    {
      lang === "es"
        ? spanishPostsSortedByDate.map(
            (
              { data, slug }: { data: BlogPostData; slug: string },
              index: number,
            ) => (
              <BlogArticle
                data={data}
                slug={slug}
                index={index}
                lang={lang as Lang}
              />
            ),
          )
        : englishPostsSortedByDate.map(
            (
              { data, slug }: { data: BlogPostData; slug: string },
              index: number,
            ) => (
              <BlogArticle
                data={data}
                slug={slug}
                index={index}
                lang={lang as Lang}
              />
            ),
          )
    }
  </div>
</BaseLayout>
