---
import type { GetStaticPaths } from "astro";
import type {
  BlogPosts,
  DynamicTags,
} from "@type/content-collections/blog-collection-types";
import type { Lang } from "@translate/dictionary";
import { getCollection } from "astro:content";
import { useTranslations } from "@translate/utils/i18n-utils";
import BlogArticle from "@components/blog/BlogArticle.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import Heading1 from "@components/ui/text-components/Heading1.astro";

export const getStaticPaths = (async (): Promise<DynamicTags[]> => {
  // Traer todos los posteos de la colección
  const allBlogPosts = await getCollection("blog");

  // Generar dinámicamente los tags según los posteos
  const uniqueTags = [
    ...new Set(allBlogPosts.map((post: BlogPosts) => post.data.tags).flat()),
  ];

  // Retornar una ruta en español e inglés por cada tag del blog
  return uniqueTags.flatMap((tag) => {
    const filteredPosts = allBlogPosts.filter((post: BlogPosts) =>
      post.data.tags.includes(tag),
    );

    const paths: DynamicTags[] = [
      {
        params: {
          tag: tag as string,
          lang: "es",
        },
        props: { posts: filteredPosts },
      },
      {
        params: {
          tag: tag as string,
          lang: "en",
        },
        props: { posts: filteredPosts },
      },
    ];

    return paths;
  });
}) satisfies GetStaticPaths;

const { tag, lang } = Astro.params;
const { posts } = Astro.props;
const t = useTranslations(lang as Lang);
---

<BaseLayout>
  <Heading1>{t("blog.tags.title")} {tag}</Heading1>
  <ul>
    {
      posts.map((post, index) => (
        <BlogArticle
          data={post.data}
          lang={post.data.language}
          slug={post.slug}
          index={index}
        />
      ))
    }
  </ul>
</BaseLayout>
