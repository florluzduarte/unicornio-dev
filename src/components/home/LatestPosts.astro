---
import { getCollection } from "astro:content";
import type { Lang } from "@i18n/dictionary";
import type { BlogPostData, BlogPosts } from "@type/content-collections";
import { useTranslations } from "@i18n/utils/i18n-utils";
import BlogArticle from "@components/blog/BlogArticle.astro";
import Heading2 from "@components/ui/text-components/Heading2.astro";

const allPostsSpanish: BlogPosts[] = await getCollection("blogEs");

const spanishPostsSortedByDate = allPostsSpanish.sort(
  (postA, postB) =>
    Date.parse(postB.data.publishDate.toISOString()) -
    Date.parse(postA.data.publishDate.toISOString())
);

const allPostsEnglish: BlogPosts[] = await getCollection("blogEn");

const englishPostsSortedByDate = allPostsEnglish.sort(
  (postA, postB) =>
    Date.parse(postB.data.publishDate.toISOString()) -
    Date.parse(postA.data.publishDate.toISOString())
);

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);
---

<section>
  <Heading2 color="text-white">{t("home.latest.articles")}</Heading2>

  {
    lang === "es"
      ? spanishPostsSortedByDate
          .slice(0, 3)
          .map((post, index) => (
            <BlogArticle
              data={post.data}
              slug={post.id}
              index={index}
              lang={lang as Lang}
            />
          ))
      : englishPostsSortedByDate
          .slice(0, 3)
          .map((post, index) => (
            <BlogArticle
              data={post.data}
              slug={post.id}
              index={index}
              lang={lang as Lang}
            />
          ))
  }
</section>
